import { createElement } from 'lwc';
import SumOrdersComponent from 'c/sumOrdersComponent';
import getSumOrdersByAccount from '@salesforce/apex/MyTeamOrdersController.getSumOrdersByAccount';

// Mock de la m√©thode Apex
jest.mock('@salesforce/apex/MyTeamOrdersController.getSumOrdersByAccount', () => ({
    default: jest.fn()
}), { virtual: true });

// Fonction pour s'assurer que les Promises sont bien r√©solues avant de valider les assertions.
function flushPromises() {
    return new Promise((resolve) => setTimeout(resolve, 0));
}

describe('c-sum-orders-component', () => {
    afterEach(() => {
        // Nettoie le DOM apr√®s chaque test.
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
        jest.clearAllMocks();
    });

    test('‚úÖ V√©rifier que le composant est bien affich√©', () => {
        const element = createElement('c-sum-orders-component', {
            is: SumOrdersComponent
        });
        document.body.appendChild(element);

        // V√©rifier que le composant est bien dans le DOM.
        expect(element).toBeTruthy();
    });

    test('‚úÖ Tester un appel Apex r√©ussi avec une somme positive', async () => {
        getSumOrdersByAccount.mockResolvedValue(Promise.resolve(500));
    
        const element = createElement('c-sum-orders-component', {
            is: SumOrdersComponent
        });
        element.recordId = '001XXXXXXX'; // Simule un ID de compte.
        document.body.appendChild(element);
    
        // ‚úÖ Attendre que la promesse soit r√©solue.
        await flushPromises();
        await Promise.resolve(); // Force une mise √† jour suppl√©mentaire.
    
        // ‚úÖ V√©rifier que la somme des commandes a bien √©t√© mise √† jour.
        expect(element.sumOrdersOfCurrentAccount).toBe(500);
        expect(element.error).toBeNull();
    });
    
    test('‚ùå Tester un appel Apex avec une somme de 0', async () => {
        getSumOrdersByAccount.mockResolvedValue(0);

        const element = createElement('c-sum-orders-component', {
            is: SumOrdersComponent
        });
        element.recordId = '001XXXXXXX';
        document.body.appendChild(element);

        await Promise.resolve();

        expect(element.sumOrdersOfCurrentAccount).toBe(0);
        expect(element.error).toBe('Erreur, pas de commandes rattach√©es √† ce compte ou le montant des commandes est √©gal √† 0');
    });

    test('‚ö†Ô∏è Tester le cas o√π l‚Äôappel Apex √©choue', async () => {
        getSumOrdersByAccount.mockRejectedValue(new Error('Erreur API'));

        const element = createElement('c-sum-orders-component', {
            is: SumOrdersComponent
        });
        element.recordId = '001XXXXXXX';
        document.body.appendChild(element);
        
        await flushPromises();
        await new Promise((resolve) => setTimeout(resolve, 0));

        expect(element.sumOrdersOfCurrentAccount).toBe(0);
        
        expect(element.error).toBeTruthy();
        if (element.error) {
            expect(element.error).toContain('Erreur lors de la r√©cup√©ration des donn√©es');
        }
    });

    test('üîÑ V√©rifier que sumOrdersOfCurrentAccount est d√©fini √† 0 si undefined', async () => {
        // Mock de la m√©thode Apex pour retourner undefined.
        getSumOrdersByAccount.mockResolvedValue(undefined);
    
        const element = createElement('c-sum-orders-component', {
            is: SumOrdersComponent
        });
        element.recordId = '001XXXXXXX';
        document.body.appendChild(element);
    
        // Attendre que toutes les promesses soient r√©solues.
        await flushPromises();
    
        // Forcer un cycle de rendu suppl√©mentaire.
        await new Promise((resolve) => setTimeout(resolve, 0));
    
        // V√©rifier que sumOrdersOfCurrentAccount est bien d√©fini √† 0.
        expect(element.sumOrdersOfCurrentAccount).toBe(0);
    });
});
